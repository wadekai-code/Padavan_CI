name: Build vb1980's kernal4.4 Padavan

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: 'target to compile'
        options:
        - 360_T6M
        - 360_T6M-PB
        - Arcadyan_WE410443-TC
        - Asus_RT-AC85P
        - C-Life_XG1
        - Diting_NEWIFI3
        - DLINK_DIR-878
        - DLINK_DIR-882
        - FCJ_G-AX1800_Black
        - FCJ_G-AX1800_White
        - Gee_B70
        - GHL_R-001
        - H3C_TX1801
        - H3C_TX1806
        - Hair_HAR-20S2U1
        - JCG_836PRO
        - JCG_AC860M
        - JCG_Q20
        - JCG_Q20-PB
        - JCG_Q10Pro
        - JCG_Q10Pro-PB
        - JCG_Q11Pro
        - JCG_Y2
        - JDCloud_1
        - JDCloud_Luban
        - Lenovo_NEWIFI2
        - Linksys_EA7500
        - Motorola_MR2600
        - Netgear_R6800
        - Netgear_R7450
        - Nokia-Sbell_A-040W-Q
        - Phicomm_K2P
        - Phicomm_K2P-NANO
        - Phicomm_K2P-USB
        - QianmoBus_B1
        - Raisecom_MSG1500_X.00
        - Raisecom_MSG1500_Z.00
        - Redmi_AC2100
        - Skspruce_WIA3300-10
        - SIM_AX1800T
        - Xiaomi_4
        - Xiaomi_AC2100
        - Xiaomi_CR6606
        - Xiaomi_CR6608
        - Xiaomi_CR6609
        - Xiaomi_R3G
        - Xiaomi_R3P
        - Xiaomi_R3P-PB
        - Xiaomi_R3P-SPI
        - Xiaomi_R4A
        - Xiaoyu_C1
        - Xiaoyu_C3
        - Xiaoyu_C5
        - Youhua_WR1200JS
        - Youhua_WR330
        - ZTE_E8820V2
        - ZTE_E8820S
        - ZTT_RX6000
        default: SIM_AX1800T
      plugins:
        description: 'json format string of include configs'
        required: true
        default: '{"vpnsvr":"n","vpncli":"n","vpncmd":"n","ss":"y","v2ray":"n","xray":"y","trojan":"y","ssobfs":"y","dnsforwarder":"n","adbyby":"n","adguardhome":"n","smartdns":"n","aliddns":"n","zerotier":"n","ddnsto":"n","wireguard":"n","frpc":"y","aldrive":"n","sqm":"y","mentohust":"n","scutclient":"n","njitclient":"n","minieap":"n","dogcom":"n"}'
      usexraymin:
        type: boolean
        description: 'use streamlined xray'
        default: false
      customization:
        description: 'json format string of customized configs'
        required: true
        default: '{"rainbowui":"y","specializedlogo":"n","changebrandlogo":"n","lanip":"192.168.2.1","signaccount":"admin","signpassword":"admin","wifi2gssid":"","wifi5gssid":"","wifi2gpsk":"","wifi5gpsk":""}'
      firmwarever:
        description: 'firmware''s version'
        required: true
        default: '20240403'
      uploadanon:
        type: boolean
        description: 'upload firmware to anonfiles'
        default: 'false'
env:
  REPOSITORY_URL: https://github.com/vb1980/padavan-4.4.git
  WORK_PATH: /opt/padavan-4.4
  DEFAULT_FILE: ./user/shared/defaults.h
  DICT_FILE: ./user/www/dict/CN.dict
  TIME_ZONE: Asia/Shanghai
  FIRMWARE_DATEPREFIX: $(date +"%Y%m%d")
  FIRMWARE_AUTHOR: vb1980
  FIRMWARE_PATH: /opt/firmwares
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - uses: actions/checkout@v4
    - uses: hendrikmuhs/ccache-action@v1.2.12
    - uses: Bonnie2980/variable-mapper@master
      id: export
      with:
        key: "${{ github.event.inputs.target }}"
        map: |
          {
            "360_T6M": {
              "model": "360-T6M"
            },
            "360_T6M-PB": {
              "model": "360-T6M-PB"
            },
            "Arcadyan_WE410443-TC": {
              "model": "WE410443-TC"
            },
            "Asus_RT-AC85P": {
              "model": "RT-AC85P"
            },
            "C-Life_XG1": {
              "model": "C-Life-XG1"
            },
            "Diting_NEWIFI3": {
              "model": "NEWIFI3"
            },
            "DLINK_DIR-878": {
              "model": "DIR-878"
            },
            "DLINK_DIR-882": {
              "model": "DIR-882"
            },
            "FCJ_G-AX1800_Black": {
              "model": "G-AX1800-B"
            },
            "FCJ_G-AX1800_White": {
              "model": "G-AX1800"
            },
            "Gee_B70": {
              "model": "B70"
            },
            "GHL_R-001": {
              "model": "GHL"
            },
            "H3C_TX1801": {
              "model": "TX1801"
            },
            "H3C_TX1806": {
              "model": "TX1801"
            },
            "Hair_HAR-20S2U1": {
              "model": "HAR-20S2U1"
            },
            "JCG_836PRO": {
              "model": "JCG-836PRO"
            },
            "JCG_AC860M": {
              "model": "JCG-AC860M"
            },
            "JCG_Q20": {
              "model": "JCG-Q20"
            },
            "JCG_Q20-PB": {
              "model": "JCG-Q20-PB"
            },
            "JCG_Q10Pro": {
              "model": "JCG-Q10Pro"
            },
            "JCG_Q10Pro-PB": {
              "model": "JCG-Q10Pro-PB"
            },
            "JCG_Q11Pro": {
              "model": "JCG-Q11Pro"
            },
            "JCG_Y2": {
              "model": "JCG-Y2"
            },
            "JDCloud_1": {
              "model": "JDCLOUD-RE-SP-01B"
            },
            "JDCloud_Luban": {
              "model": "JDCLOUD-RE-CP-02"
            },
            "Lenovo_NEWIFI2": {
              "model": "NEWIFI"
            },
            "Linksys_EA7500": {
              "model": "EA7500"
            },
            "Motorola_MR2600": {
              "model": "MR2600"
            },
            "Netgear_R6800": {
              "model": "NETGEAR-R6800"
            },
            "Netgear_R7450": {
              "model": "NETGEAR-R7450"
            },
            "Nokia-Sbell_A-040W-Q": {
              "model": "BELL-A040WQ"
            },
            "Phicomm_K2P": {
              "model": "K2P"
            },
            "Phicomm_K2P-NANO": {
              "model": "K2P-NANO"
            },
            "Phicomm_K2P-USB": {
              "model": "K2P-USB"
            },
            "QianmoBus_B1": {
              "model": "QM-B1"
            },
            "Raisecom_MSG1500_X.00": {
              "model": "MSG1500"
            },
            "Raisecom_MSG1500_Z.00": {
              "model": "MSG1500-Z"
            },
            "Redmi_AC2100": {
              "model": "RM2100"
            },
            "Skspruce_WIA3300-10": {
              "model": "WIA3300-10"
            },
            "SIM_AX1800T": {
              "model": "SIM-AX1800T"
            },
            "Xiaomi_4": {
              "model": "MI-4"
            },
            "Xiaomi_AC2100": {
              "model": "R2100"
            },
            "Xiaomi_CR6606": {
              "model": "CR660x"
            },
            "Xiaomi_CR6608": {
              "model": "CR660x"
            },
            "Xiaomi_CR6609": {
              "model": "CR660x"
            },
            "Xiaomi_R3G": {
              "model": "MI-R3G"
            },
            "Xiaomi_R3P": {
              "model": "MI-R3P"
            },
            "Xiaomi_R3P-PB": {
              "model": "MI-R3P-PB"
            },
            "Xiaomi_R3P-SPI": {
              "model": "MI-R3P-SPI"
            },
            "Xiaomi_R4A": {
              "model": "MI-R4A"
            },
            "Xiaoyu_C1": {
              "model": "XY-C1"
            },
            "Xiaoyu_C3": {
              "model": "XY-C1"
            },
            "Xiaoyu_C5": {
              "model": "XY-C1"
            },
            "Youhua_WR1200JS": {
              "model": "WR1200JS"
            },
            "Youhua_WR330": {
              "model": "WR1200JS"
            },
            "ZTE_E8820V2": {
              "model": "ZTE-E8820V2"
            },
            "ZTE_E8820S": {
              "model": "ZTE-E8820S"
            },
            "ZTT_RX6000": {
              "model": "ZTT-RX6000"
            },
            ".*": {
              "model": "K2P"
            }
          }
        export_to: env
        mode: first_match
    - uses: actions/setup-go@v5
      with:
        go-version: '1.23.0'
        check-latest: true
        cache-dependency-path: '**/go.sum'
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
        fakeroot kmod cpio git python3-docutils gettext automake autopoint \
        texinfo build-essential help2man pkg-config zlib1g-dev libgmp3-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget libc-dev-bin libev-dev \
        libssl-dev liblzo2-dev libpam0g-dev libevent-dev
        sudo timedatectl set-timezone "$TIME_ZONE"
    - name: Clone source code
      run: |
        git clone --depth=1 $REPOSITORY_URL $WORK_PATH
        cd $WORK_PATH
        sed -i '/cp -f/d' Makefile
    - name: Extract toolchain
      run: |
        cp -f toolchain/mipsel-linux-uclibc-gcc10-uClibcng1048.tar.xz $WORK_PATH
        cd $WORK_PATH
        mkdir -p toolchain-mipsel/toolchain-4.4.x
        tar -Jxvf mipsel-linux-uclibc-gcc10-uClibcng1048.tar.xz -C toolchain-mipsel/toolchain-4.4.x
    - name: Parse json string of customization configs
      run: |
        echo "rainbowui=${{fromJson(github.event.inputs.customization).rainbowui}}" >> $GITHUB_ENV
        echo "specializedlogo=${{fromJson(github.event.inputs.customization).specializedlogo}}" >> $GITHUB_ENV
        echo "changebrandlogo=${{fromJson(github.event.inputs.customization).changebrandlogo}}" >> $GITHUB_ENV
        echo "lanip=${{fromJson(github.event.inputs.customization).lanip}}" >> $GITHUB_ENV
        echo "signaccount=${{fromJson(github.event.inputs.customization).signaccount}}" >> $GITHUB_ENV
        echo "signpassword=${{fromJson(github.event.inputs.customization).signpassword}}" >> $GITHUB_ENV
        echo "wifi2gssid=${{fromJson(github.event.inputs.customization).wifi2gssid}}" >> $GITHUB_ENV
        echo "wifi5gssid=${{fromJson(github.event.inputs.customization).wifi5gssid}}" >> $GITHUB_ENV
        echo "wifi2gpsk=${{fromJson(github.event.inputs.customization).wifi2gpsk}}" >> $GITHUB_ENV
        echo "wifi5gpsk=${{fromJson(github.event.inputs.customization).wifi5gpsk}}" >> $GITHUB_ENV
    - name: Customization
      run: |
        cp -f bashScripts/setlanip.sh $WORK_PATH/trunk
        cp -f bashScripts/setaccount.sh $WORK_PATH/trunk
        cp -f bashScripts/setwifi.sh $WORK_PATH/trunk
        cd $WORK_PATH/trunk
        sudo chmod +x setlanip.sh
        sudo chmod +x setaccount.sh
        sudo chmod +x setwifi.sh
        if [ "${{ env.rainbowui }}" = "true" ]; then
          bash ./setlanip.sh ${{ env.DEFAULT_FILE }} ./user/www/n56u_rainbow/Restarting.asp ${{ env.DICT_FILE }} ${{ env.lanip }}
        else
          bash ./setlanip.sh ${{ env.DEFAULT_FILE }} ./user/www/n56u_ribbon_fixed/Restarting.asp ${{ env.DICT_FILE }} ${{ env.lanip }}
        fi
        bash ./setaccount.sh ${{ env.signaccount }} ${{ env.signpassword }} ${{ env.DEFAULT_FILE }}
        bash ./setwifi.sh ${{ env.wifi2gssid }} ${{ env.wifi5gssid }} ${{ env.wifi2gpsk }} ${{ env.wifi5gpsk }} ${{ env.DEFAULT_FILE }}
        #cat ${{ env.DEFAULT_FILE }}
    - name: Apply rainbow themes
      if: env.rainbowui == 'y'
      run: |
        cd $WORK_PATH/trunk/user/httpd
        git apply formlogin.patch
        cd $WORK_PATH/trunk/user/www
        sed -i "s/WEBUI_NAME=n56u_ribbon_fixed/WEBUI_NAME=n56u_rainbow/g" ./Makefile
    - name: Apply specialized logo
      if: env.specializedlogo == 'y'
      run: |
        logoFile=
        if [ "${{ env.model }}" = "BELL-A040WQ" ]; then
        logoFile="a040wq/bell_asus_logo.png"
        fi
        if [ "${{ env.model }}" = "ZTE-E8820S" ]; then
        logoFile="e8820s/zte_asus_logo.png"
        fi
        if [ "${{ env.model }}" = "MSG1500" ]; then
        logoFile="msg1500/raisecom_asus_logo.png"
        fi
        if [ -n "$logoFile" ]; then
            cp -f $logoFile $WORK_PATH/trunk/user/www/n56u_ribbon_fixed/bootstrap/img/asus_logo.png
            if [ "${{ env.rainbowui }}" = "y" ]; then
                cp -f $logoFile $WORK_PATH/trunk/user/www/n56u_rainbow/bootstrap/img/logo_blue.png
                cp -f $logoFile $WORK_PATH/trunk/user/www/n56u_rainbow/bootstrap/img/logo_cyan.png
                cp -f $logoFile $WORK_PATH/trunk/user/www/n56u_rainbow/bootstrap/img/logo_green.png
                cp -f $logoFile $WORK_PATH/trunk/user/www/n56u_rainbow/bootstrap/img/logo_orange.png
                cp -f $logoFile $WORK_PATH/trunk/user/www/n56u_rainbow/bootstrap/img/logo_purple.png
                cp -f $logoFile $WORK_PATH/trunk/user/www/n56u_rainbow/bootstrap/img/logo_red.png
                cp -f $logoFile $WORK_PATH/trunk/user/www/n56u_rainbow/bootstrap/img/logo_yellow.png
            fi
        fi
    - name: Change specialized brand logo image
      if: env.changebrandlogo == 'y' && env.specializedlogo == 'n'
      run: |
        cd $WORK_PATH/trunk
        if [ "${{ env.rainbowui }}" = "y" ]; then
            sudo ./change_logo.sh ${{ env.model }} 0
        else
            sudo ./change_logo.sh ${{ env.model }}
        fi
    - name: Parse json string of include plugins
      run: |
        echo "vpnsvr=${{fromJson(github.event.inputs.plugins).vpnsvr}}" >> $GITHUB_ENV
        echo "vpncli=${{fromJson(github.event.inputs.plugins).vpncli}}" >> $GITHUB_ENV
        echo "vpncmd=${{fromJson(github.event.inputs.plugins).vpncmd}}" >> $GITHUB_ENV
        echo "ss=${{fromJson(github.event.inputs.plugins).ss}}" >> $GITHUB_ENV
        echo "v2ray=${{fromJson(github.event.inputs.plugins).v2ray}}" >> $GITHUB_ENV
        echo "xray=${{fromJson(github.event.inputs.plugins).xray}}" >> $GITHUB_ENV
        echo "trojan=${{fromJson(github.event.inputs.plugins).trojan}}" >> $GITHUB_ENV
        echo "ssobfs=${{fromJson(github.event.inputs.plugins).ssobfs}}" >> $GITHUB_ENV
        echo "dnsforwarder=${{fromJson(github.event.inputs.plugins).dnsforwarder}}" >> $GITHUB_ENV
        echo "adbyby=${{fromJson(github.event.inputs.plugins).adbyby}}" >> $GITHUB_ENV
        echo "adguardhome=${{fromJson(github.event.inputs.plugins).adguardhome}}" >> $GITHUB_ENV
        echo "smartdns=${{fromJson(github.event.inputs.plugins).smartdns}}" >> $GITHUB_ENV
        echo "aliddns=${{fromJson(github.event.inputs.plugins).aliddns}}" >> $GITHUB_ENV
        echo "zerotier=${{fromJson(github.event.inputs.plugins).zerotier}}" >> $GITHUB_ENV
        echo "ddnsto=${{fromJson(github.event.inputs.plugins).ddnsto}}" >> $GITHUB_ENV
        echo "wireguard=${{fromJson(github.event.inputs.plugins).wireguard}}" >> $GITHUB_ENV
        echo "frpc=${{fromJson(github.event.inputs.plugins).frpc}}" >> $GITHUB_ENV
        echo "aldrive=${{fromJson(github.event.inputs.plugins).aldrive}}" >> $GITHUB_ENV
        echo "sqm=${{fromJson(github.event.inputs.plugins).sqm}}" >> $GITHUB_ENV
        echo "mentohust=${{fromJson(github.event.inputs.plugins).mentohust}}" >> $GITHUB_ENV
        echo "scutclient=${{fromJson(github.event.inputs.plugins).scutclient}}" >> $GITHUB_ENV
        echo "njitclient=${{fromJson(github.event.inputs.plugins).njitclient}}" >> $GITHUB_ENV
        echo "minieap=${{fromJson(github.event.inputs.plugins).minieap}}" >> $GITHUB_ENV
        echo "dogcom=${{fromJson(github.event.inputs.plugins).dogcom}}" >> $GITHUB_ENV
    - name: Custom config
      run: |
        cd $WORK_PATH/trunk
        if [ ! -f configs/templates/${{ env.model }}.config ] ; then
        echo "configs/templates/${{ env.model }}.config not found"
        exit 1
        fi
        cp -f configs/templates/${{ env.model }}.config .config
    - name: Build firmware
      run: |
        cd $WORK_PATH
        sudo make ${{ env.model }}
        echo "FIRMWARE_DATEPREFIX=$(date +"%Y%m%d")" >> $GITHUB_ENV
    - name: Organize firmware files
      id: organize
      run: |
        rainbow_Prefix=""
        if [ "${{ env.rainbowui }}" = "y" ]; then
            rainbow_Prefix="rainbow_"
        fi
        mkdir -p $FIRMWARE_PATH/
        cd $WORK_PATH/trunk/images
        for firmwarefile in $(ls *.trx)
        do sudo mv $firmwarefile $FIRMWARE_PATH/${FIRMWARE_DATEPREFIX}"_"${FIRMWARE_AUTHOR}"_"${{ env.model }}"_"${rainbow_Prefix}"kernal4.4.trx"
        done
        cd $FIRMWARE_PATH
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "STATUS=success" >> $GITHUB_ENV
    - name : Upload packages
      uses: actions/upload-artifact@main
      if: env.STATUS == 'success'
      with:
        name: Padavan44-packages
        path: ${{ env.FIRMWARE }}
    - name: Upload firmware to anonfiles
      if: env.STATUS == 'success' && github.event.inputs.uploadanon == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer anon --no-progress ${FIRMWARE} 2>&1 | tee anonfile.log
        echo "::warning file=anonfile.com::$(cat anonfile.log | grep -o -E "https?://[a-zA-Z0-9\.\/_&=@$%?~#-]*")"
    - name: Remove obsolete firmwares on artifacts
      uses: Bonnie2980/gha-remove-artifacts@master
      if: env.STATUS == 'success'
      with:
        age: '1 day'
        skip-recent: 5
